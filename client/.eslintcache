[{"/Users/derek/Documents/github-projects/canvas-game/client/src/index.js":"1","/Users/derek/Documents/github-projects/canvas-game/client/src/reportWebVitals.js":"2","/Users/derek/Documents/github-projects/canvas-game/client/src/App.js":"3","/Users/derek/Documents/github-projects/canvas-game/client/src/components/Canvas.js":"4","/Users/derek/Documents/github-projects/canvas-game/client/src/constants.js":"5","/Users/derek/Documents/github-projects/canvas-game/client/src/components/Score.js":"6"},{"size":500,"mtime":1607233579044,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1607233579044,"results":"9","hashOfConfig":"8"},{"size":5439,"mtime":1613326390865,"results":"10","hashOfConfig":"8"},{"size":482,"mtime":1610299599797,"results":"11","hashOfConfig":"8"},{"size":406,"mtime":1613325542868,"results":"12","hashOfConfig":"8"},{"size":200,"mtime":1610691893060,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1radsz3",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/derek/Documents/github-projects/canvas-game/client/src/index.js",[],["29","30"],"/Users/derek/Documents/github-projects/canvas-game/client/src/reportWebVitals.js",[],"/Users/derek/Documents/github-projects/canvas-game/client/src/App.js",["31"],"import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\n\n//components\nimport Canvas from \"./components/Canvas\";\nimport Score from \"./components/Score\";\n\nimport { BOARD_MULTIPLIER, BOARD_SEPARATION, COLLISION } from \"./constants\";\n\nconst defaultSnake = [\n  { x: 0, y: 0 },\n  { x: 30, y: 0 },\n  { x: 60, y: 0 },\n];\n\nfunction App() {\n  const [ctx, setCtx] = useState(null);\n  const [foodPositions, setFoodPositions] = useState([]);\n  const [snakePositions, setSnakePositions] = useState(defaultSnake);\n  let [score, setScore] = useState(0);\n\n  useEffect(() => {\n    if (ctx !== null) {\n      createFood();\n      drawSnake();\n    }\n  });\n\n  //functions\n\n  const drawShape = (x, y, colour = \"black\") => {\n    ctx.fillStyle = colour;\n    ctx.fillRect(\n      x + BOARD_SEPARATION,\n      y + BOARD_SEPARATION,\n      ctx.canvas.width * BOARD_MULTIPLIER - BOARD_SEPARATION,\n      ctx.canvas.height * BOARD_MULTIPLIER - BOARD_SEPARATION\n    );\n  };\n\n  const drawSnake = () => {\n    for (let each of snakePositions) {\n      drawShape(each.x, each.y, \"black\");\n    }\n  };\n\n  const clearField = () => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  };\n\n  const clearPosition = (x, y) => {\n    ctx.clearRect(\n      x,\n      y,\n      ctx.canvas.width * BOARD_MULTIPLIER,\n      ctx.canvas.height * BOARD_MULTIPLIER\n    );\n  };\n\n  const checkBoundary = (position) => {\n    //checking if out of bounds 4 cases up, down, left, right\n    let newPosition = position;\n    if (newPosition.x < 0) {\n      return { ...newPosition, x: ctx.canvas.width * (1 - BOARD_MULTIPLIER) };\n    } else if (newPosition.x >= ctx.canvas.width) {\n      return { ...newPosition, x: 0 };\n    } else if (newPosition.y < 0) {\n      return { ...newPosition, y: ctx.canvas.height * (1 - BOARD_MULTIPLIER) };\n    } else if (position.y >= ctx.canvas.height) {\n      return { ...newPosition, y: 0 };\n    }\n    return newPosition;\n  };\n\n  const checkCollision = (position) => {\n    //checks to see if the snake hits a food or itself\n    let foodCheckIndex = foodPositions.findIndex(\n      (foodPosition) =>\n        foodPosition.x === position.x && foodPosition.y === position.y\n    );\n\n    let snakeCheckIndex = snakePositions.findIndex(\n      (snakePosition) =>\n        snakePosition.x === position.x && snakePosition.y === position.y\n    );\n\n    if (snakeCheckIndex !== -1) {\n      return COLLISION.SNAKE;\n    }\n\n    if (foodCheckIndex !== -1) {\n      let tempFoodPositions = foodPositions;\n      tempFoodPositions.splice(foodCheckIndex, 1);\n\n      createFood();\n      setScore(score + 1);\n      return COLLISION.FOOD;\n    } else {\n      return COLLISION.CLEAR;\n    }\n  };\n\n  const createFood = () => {\n    let x, y;\n\n    if (foodPositions.length < 1) {\n      do {\n        x =\n          Math.floor(Math.random() * 100 * BOARD_MULTIPLIER) *\n          ctx.canvas.width *\n          BOARD_MULTIPLIER;\n        y =\n          Math.floor(Math.random() * 100 * BOARD_MULTIPLIER) *\n          ctx.canvas.height *\n          BOARD_MULTIPLIER;\n        console.log(x, y);\n      } while (snakePositions.some((snake) => snake.x === x && snake.y === y));\n      setFoodPositions([{ x, y }]);\n    }\n\n    foodPositions.forEach((position) => {\n      drawShape(position.x, position.y, \"green\");\n    });\n  };\n\n  const moveSnake = (direction) => {\n    let tempSnake = [...snakePositions];\n    let lastPosition = tempSnake[0];\n    let newPosition = snakePositions[snakePositions.length - 1];\n\n    switch (direction) {\n      case \"ArrowDown\":\n        newPosition = {\n          ...snakePositions[snakePositions.length - 1],\n          y:\n            snakePositions[snakePositions.length - 1].y +\n            ctx.canvas.height * BOARD_MULTIPLIER,\n        };\n        break;\n      case \"ArrowUp\":\n        newPosition = {\n          ...snakePositions[snakePositions.length - 1],\n          y:\n            snakePositions[snakePositions.length - 1].y -\n            ctx.canvas.height * BOARD_MULTIPLIER,\n        };\n\n        break;\n      case \"ArrowLeft\":\n        newPosition = {\n          ...snakePositions[snakePositions.length - 1],\n          x:\n            snakePositions[snakePositions.length - 1].x -\n            ctx.canvas.width * BOARD_MULTIPLIER,\n        };\n        break;\n      case \"ArrowRight\":\n        newPosition = {\n          ...snakePositions[snakePositions.length - 1],\n          x:\n            snakePositions[snakePositions.length - 1].x +\n            ctx.canvas.width * BOARD_MULTIPLIER,\n        };\n        break;\n      default:\n    }\n    newPosition = checkBoundary(newPosition);\n    tempSnake.push(newPosition);\n    clearPosition(lastPosition.x, lastPosition.y);\n    let collision = checkCollision(checkBoundary(newPosition));\n    switch (collision) {\n      case COLLISION.SNAKE:\n        alert(`YOU LOSE\n        you ate ${score} pellets`);\n        setSnakePositions(defaultSnake);\n        setScore(0);\n        clearField();\n        break;\n      case COLLISION.FOOD:\n        setSnakePositions(tempSnake);\n        break;\n      case COLLISION.CLEAR:\n        setSnakePositions(tempSnake);\n        tempSnake.shift();\n        break;\n      default:\n    }\n  };\n\n  const setContext = (canvas) => {\n    const context = canvas.current.getContext(\"2d\");\n    setCtx(context);\n  };\n\n  return (\n    <div className=\"App\" tabIndex={0} onKeyDown={(e) => moveSnake(e.code)}>\n      <Canvas setContext={setContext}></Canvas>\n      <Score score={score} />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/derek/Documents/github-projects/canvas-game/client/src/components/Canvas.js",[],"/Users/derek/Documents/github-projects/canvas-game/client/src/constants.js",[],"/Users/derek/Documents/github-projects/canvas-game/client/src/components/Score.js",[],["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":117,"column":36,"nodeType":"40","messageId":"41","endLine":117,"endColumn":77},{"ruleId":"34","replacedBy":"42"},{"ruleId":"36","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'x', 'y'.","ArrowFunctionExpression","unsafeRefs",["44"],["45"],"no-global-assign","no-unsafe-negation"]